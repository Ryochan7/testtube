# Generated by Django 5.0.6 on 2024-06-08 17:38

import django.db.models.deletion
import django.utils.timezone
import sorl.thumbnail.fields
import taggit.managers
import uuid
import videos.models
import videos.storage
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MediaCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField()),
                ('summary', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Media Categories',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('uuid_code', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('media_file', models.FileField(max_length=200, storage=videos.storage.FileMoveSystemStorage(location='/home/ryochan7/Projects/testtube-env-django5/testtube/testtube/tempuploads'), upload_to=videos.models.tmp_media_upload_to)),
                ('description', models.TextField(blank=True)),
                ('view_count', models.IntegerField(db_index=True, default=0)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('thumbnail', sorl.thumbnail.fields.ImageField(max_length=200, upload_to=videos.models.thumbnail_user_upload_to)),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Processing'), (2, 'Published'), (3, 'Error')], default=0)),
                ('visibility', models.IntegerField(choices=[(0, 'Unpublished'), (1, 'Public'), (2, 'Unlisted'), (3, 'Private')], default=0)),
                ('rating', models.IntegerField(choices=[(0, 'All Ages'), (1, 'NSFW'), (2, 'NSFL')], default=0)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration', models.IntegerField(default=0)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Up to three space-separated list of tags', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('uploader', models.ForeignKey(default=None, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(default=videos.models.default_media_cat, on_delete=django.db.models.deletion.CASCADE, to='videos.mediacategory')),
            ],
            options={
                'verbose_name': 'Media File',
                'verbose_name_plural': 'Media Files',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='MediaFeaturedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.media')),
            ],
            options={
                'verbose_name': 'Featured Media',
                'verbose_name_plural': 'Featured Media Items',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='MediaHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.media')),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media History Item',
                'verbose_name_plural': 'Media History Items',
            },
        ),
        migrations.CreateModel(
            name='MediaPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('description', models.TextField(blank=True)),
                ('privacy', models.IntegerField(choices=[(0, 'Public'), (1, 'Private')], default=0)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media', models.ManyToManyField(to='videos.media')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media Playlist',
                'verbose_name_plural': 'Media Playlists',
            },
        ),
        migrations.CreateModel(
            name='MediaSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('origin_media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='videos.media')),
                ('subbed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subbed', to=settings.AUTH_USER_MODEL)),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriber', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media Subscription',
                'verbose_name_plural': 'Media Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='MediaView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logged_ip', models.GenericIPAddressField()),
                ('created_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.media')),
                ('visitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media View',
                'verbose_name_plural': 'Media Views',
            },
        ),
        migrations.CreateModel(
            name='MediaReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.IntegerField(choices=[(0, 'Like'), (1, 'Dislike')], db_index=True)),
                ('date', models.DateTimeField(auto_now=True)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.media')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reaction',
                'verbose_name_plural': 'Reactions',
                'unique_together': {('sender', 'media', 'reaction')},
            },
        ),
    ]
